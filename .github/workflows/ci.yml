name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Get Version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
          echo "VERSION=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_OUTPUT
          fi

      - name: Build and Test
        run: |
          mvn versions:set -DnewVersion=${{ steps.get_version.outputs.VERSION }}
          mvn clean verify

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Check Coverage
        run: |
          COVERAGE=$(mvn jacoco:report | grep -A1 "Line Coverage" | tail -n1 | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Test coverage is below 80%"
            exit 1
          fi

      - name: Upload JAR
        uses: actions/upload-artifact@v3
        with:
          name: price-service-${{ steps.get_version.outputs.VERSION }}
          path: target/*.jar

## NOTE: Comentado solo para propÃ³sitos del uso de github actions
#  sonar:
#    needs: build-and-test
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#          cache: maven
#
#      - name: SonarCloud Scan
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: mvn verify sonar:sonar
  release:
#    needs: [build-and-test, sonar]
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download JAR
        uses: actions/download-artifact@v3
        with:
          name: price-service-${{ steps.get_version.outputs.VERSION }}
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*.jar
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:latest